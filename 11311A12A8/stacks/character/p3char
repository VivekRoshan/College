/*Name:S.Vivek Roshan                  Date:1/03/2012
 Class:ITF2        Roll:11311A12A8
elementdef.h */


typedef char elementtype;   //initialising the elementtype


/*/*Name:S.Vivek Roshan                  Date:1/03/2012
 Class:ITF2        Roll:11311A12A8
 * element.h*/


#include<stdio.h>
#include<stdlib.h>
#include"elementdef.h"        //adding the elementdef.h header file
elementtype readelement();     //reading the element
void showelement(elementtype x);   //prototype for showing the element



/*/*Name:S.Vivek Roshan                  Date:1/03/2012
 Class:ITF2        Roll:11311A12A8 
 * element.c*/


#include<stdio.h>
#include<stdlib.h>
#include"element.h"     //including the element.h header file
char readelement()
{
	elementtype x;   //function to read the element character type
	printf("enter the character");    
	scanf(" %c",&x);     //reading the element
	return x;
}
void showelement(elementtype x)     //function to show the element
{
	printf("\t %5c\n",x);   
}




/*/*Name:S.Vivek Roshan                  Date:1/03/2012
 Class:ITF2        Roll:11311A12A8
 * stackADT.h*/


#include<stdio.h>
#include<stdlib.h>
#include"element.h"       //including the element.h
struct stack               //structure of the stack
{
	int maxsize;       //members
	int top;
	elementtype *stackelement;
};                                  //all the prototypes
struct stack createstack(int m); 
void initstack(struct stack *s);
int empty(struct stack *s);
int full(struct stack *s);
void push(struct stack *s,elementtype e);
elementtype pop(struct stack *s);
void display(struct stack s);
elementtype viewtop(struct stack s);
void disposestack(struct stack *s);




/*/*Name:S.Vivek Roshan                  Date:1/03/2012
 Class:ITF2        Roll:11311A12A8
 * stackADT.c*/

#include<stdio.h>
#include<stdlib.h>
#include"stackADT.h"       //including the stackADT.h header file
struct stack createstack(int m)     //creating the memory
{
	struct stack temp;
	temp.maxsize=m;
	temp.stackelement=(elementtype*)malloc(m*sizeof (elementtype));
	return temp;
}
void initstack(struct stack *s)     //initialising the stack in function
{
	s->top=0;
}
int empty(struct stack *s)
{
	return(s->top==0);                //checking wheather it is empty
}
int full(struct stack *s)            //checking wheather it is full
{
	return(s->top==s->maxsize);
}
void push(struct stack *s,elementtype e)    //function for pushing
{
if(full(s))
	printf("error:over flow");
else
	s->stackelement[s->top++]=e;
}
elementtype pop(struct stack *s)           //function for popping
{
if(empty(s))
{
	printf("error:under flow");
	exit(1);
}
return s->stackelement[--(s->top)];
}
void display(struct stack s)               //function for display the stack
{
	int i;
	printf("top-->\n");
	for(i=s.top-1;i>=0;i--)
{
showelement(s.stackelement[i]);
}
	printf("-------------------------stack");
}
elementtype viewtop(struct stack s)      //function for viewing the top
{
	return(s.stackelement[s.top-1]);
}
void disposestack(struct stack *s)   //for disposing the stack
{
	free(s->stackelement);
}
 


/*Name:Vivek Roshan                              Date:1/3/2012
 * Class:IT F2      Rollnum:11311A12A8
 *program to convert infix expression to postfix */
#include<stdio.h>
#include<stdlib.h>
#include"stackADT.h"
#include<ctype.h>
#define NUMBER 0
int gettoken(char *s)
{
  int i=0,c;
  while((s[0]=c=getchar())==' '||c=='\t')
    ;
  s[1]='\0';
  if(!isdigit(c))
    return c;
  while(isdigit(s[++i]=c=getchar()))
     ;
  s[i]='\0';
  if(c!=EOF)
    ungetc(c,stdin);
  return NUMBER;
}

int priority(char c)
{
  switch(c)
  {
    case '(':return 0;
    case '+':
    case '-': return 1;
    case '*':
    case '/':
    case '%': return 2;
  }
}
int operator(char c)
{
  switch(c)
  {
    case '+':
    case '-':
    case '*':
    case '/':
    case '%':
    case '(':
    case ')': return 1;
    default : return 0;
  }
}
int main()
{
   char s[80];
   struct stack st;
   elementtype token,temp;
   st=createstack(50);
   initstack(&st);
   while((token=gettoken(s))!=EOF)
   {
     if(token=='(')
       push(&st,token);
     else if(token==')')
       while((token=pop(&st))!='(')
         printf(" %c",token);
     else if(operator(token))
     {
       while((!empty(&st))&&(priority(token))<=priority(viewtop(st)))
         printf(" %c",pop(&st));
         push(&st,token);
     }
    else if(token==NUMBER)
{
     printf("%s",s);
}
    else if(token=='\n')
    {
      while(!empty(&st))
       printf("%c",pop(&st));
       putchar('\n');
    }
    else
      printf("error:expression fault \n");
    }
    disposestack(&st);
    return 0;
}
/*
[11311A12A8@itlab character]$ gcc convertion.c element.c stackADT.c
[11311A12A8@itlab character]$ ./a.out
2+3/4*6-5
234 /6 * +5-
[11311A12A8@itlab character]$ ./a.out
2+3
23+
*/
