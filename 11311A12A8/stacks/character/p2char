/*Name:S.Vivek Roshan                       Date:1/03/2012
  Roll:11311A12A8              Class:IT F2
elementdef.h */
typedef char elementtype;   //initialising the elementtype
/*Name:S.Vivek Roshan                       Date:1/03/2012
  Roll:11311A12A8              Class:IT F2
 * element.h*/


#include<stdio.h>
#include<stdlib.h>
#include"elementdef.h"        //adding the elementdef.h header file
elementtype readelement();     //reading the element
void showelement(elementtype x);   //prototype for showing the element

/*Name:S.Vivek Roshan                       Date:1/03/2012
  Roll:11311A12A8              Class:IT F2
 * element.c*/


#include<stdio.h>
#include<stdlib.h>
#include"element.h"     //including the element.h header file
char readelement()
{
	elementtype x;   //function to read the element character type
	printf("enter the character");    
	scanf(" %c",&x);     //reading the element
	return x;
}
void showelement(elementtype x)     //function to show the element
{
	printf("\t %5c\n",x);   
}


/*Name:S.Vivek Roshan                       Date:1/03/2012
  Roll:11311A12A8              Class:IT F2
 * stackADT.h*/
#include<stdio.h>
#include<stdlib.h>
#include"element.h"       //including the element.h
struct stack               //structure of the stack
{
	int maxsize;       //members
	int top;
	elementtype *stackelement;
};                                  //all the prototypes
struct stack createstack(int m); 
void initstack(struct stack *s);
int empty(struct stack *s);
int full(struct stack *s);
void push(struct stack *s,elementtype e);
elementtype pop(struct stack *s);
void display(struct stack s);
elementtype viewtop(struct stack s);
void disposestack(struct stack *s);


/*Name:S.Vivek Roshan                       Date:1/03/2012
  Roll:11311A12A8              Class:IT F2
 * stackADT.c*/


#include<stdio.h>
#include<stdlib.h>
#include"stackADT.h"       //including the stackADT.h header file
struct stack createstack(int m)     //creating the memory
{
	struct stack temp;
	temp.maxsize=m;
	temp.stackelement=(elementtype*)malloc(m*sizeof (elementtype));
	return temp;
}
void initstack(struct stack *s)     //initialising the stack in function
{
	s->top=0;
}
int empty(struct stack *s)
{
	return(s->top==0);                //checking wheather it is empty
}
int full(struct stack *s)            //checking wheather it is full
{
	return(s->top==s->maxsize);
}
void push(struct stack *s,elementtype e)    //function for pushing
{
if(full(s))
	printf("error:over flow");
else
	s->stackelement[s->top++]=e;
}
elementtype pop(struct stack *s)           //function for popping
{
if(empty(s))
{
	printf("error:under flow");
	exit(1);
}
return s->stackelement[--(s->top)];
}
void display(struct stack s)               //function for display the stack
{
	int i;
	printf("top-->\n");
	for(i=s.top-1;i>=0;i--)
{
showelement(s.stackelement[i]);
}
	printf("-------------------------stack");
}
elementtype viewtop(struct stack s)      //function for viewing the top
{
	return(s.stackelement[s.top-1]);
}
void disposestack(struct stack *s)   //for disposing the stack
{
	free(s->stackelement);
}

/*Name:Vivek Roshan                              Date:1/3/2012
 *  * Class:IT F2      Rollnum:11311A12A8
 * program for checking wheather an expression is balanced or not */

#include<stdio.h>
#include<stdlib.h>
#include"stackADT.h"
int opening(char c)
{
  return((c=='(')||(c=='{')||(c=='['));
}
int closing(char c)
{
  return((c==')')||(c=='}')||(c==']'));
}
char counter(char c)
{
  if(c==')')
   return '(';
  if(c=='}')
   return '{';
  if(c==']')
   return '[';
  return '\0';
}
int main()
{
  struct stack s;
  elementtype c;
  s=createstack(50);
  initstack(&s);
  while((c=getchar())!='\n')
    {
   	 if(opening(c))
      	 push(&s,c);
    else if(closing(c))
    {
    	  if(empty(&s))
    {
        printf("error:unbalance \n");
    }
    else if(pop(&s)!=counter(c))
    {
      printf("error:unbalance \n");
      exit(2);
    }
    }
  }
  if (empty(&s))
   printf("expression is balanced \n");
  else
   printf("error: unbalance \n");
  disposestack(&s);
  return 0;
}
/*
OUTPUTS:
[11311A12A8@itlab character]$ gcc balancing.c element.c stackADT.c
[11311A12A8@itlab character]$ ./a.out
(2+3)-(2*3)
expression is balanced
[11311A12A8@itlab character]$ ./a.out
(2+3)*(2
error: unbalance
*/
